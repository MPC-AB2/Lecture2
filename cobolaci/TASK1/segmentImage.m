function [BW,maskedImage] = segmentImage(RGB)
%segmentImage Segment image using auto-generated code from imageSegmenter app
%  [BW,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the imageSegmenter app. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 24-Feb-2022
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Graph cut
foregroundInd = [4419390 5027622 5127846 5169318 5210790 5238438 5283366 5338662 5380134 5438886 5466534 5535658 5594410 5635882 5649710 5677362 5722290 5777586 5819062 5863990 5919286 5945384 5945413 5945450 5945470 5959167 5959307 5978042 5990230 6004268 6004284 6019514 6031957 6045477 6059633 6073101 6074810 6086900 6101154 6117979 6118471 6118533 6119738 6131795 6146210 6146234 6159414 6160083 6160099 6160116 6160132 6160144 6160169 6160185 6160198 6160226 6160230 6160239 6160243 6160247 6174079 6174087 6187038 6187923 6200837 6201760 6202690 6215600 6228420 6228440 6228457 6242223 6243260 6273311 6287114 6288205 6289090 6315861 6328558 6356197 6372034 6384993 6401097 6442540 6443758 6499906 6512886 6525464 6543994 6558658 6598035 6599298 6611859 6627778 6667155 6685706 6700358 6754830 6769478 6797126 6826131 6827415 6842054 6869702 6897350 6910363 6924998 6950560 6969926 6982943 7011394 7038243 7039038 7066682 7078448 7108146 7124647 7139246 7180710 7192504 7221419 7249821 7336205 7361861 7408773 7477885 7491003 7517397 7550448 7578092 7619548 7647188 7674188 7704037 7733571 7775027 7833176 7845742 7861402 7887214 7916678 7958137 8001266 8044004 8044517 8085977 8144716 8170614 8186164 8199545 8213804 8257014 8272527 8313605 8313978 8326142 8369246 8381438 8413842 8427969 8440190 8469408 8481662 8496794 8509310 8510851 8524647 8554238 8555558 8555710 8569386 8583337 8595706 8610875 8610952 8624715 8624748 8664818 8709742 8737385 8751205 8778853 8837605 8879081 8920586 8920619 8920648 8920681 8920709 8920738 8920771 8920795 8920824 8920857 8920886 8948570 8948599 8965912 8993589 8993626 9021315 9035167 9035200 9035233 9035278 9035307 9035339 9035380 9035413 9035446 9035491 9035524 9077029 9090881 9090927 9090955 9108268 9108280 9108305 9108338 9108387 9108424 9108473 9108518 9108555 9108592 9108633 9108674 9150211 9164068 9164093 9205581 9250522 9333470 9502822 9589222 9630694 9658342 9689438 9758545 9817289 9844929 9886397 9927865 9958965 10000437 10041909 10114485 10142133 10183605 10225077 10297653 10339129 10366777 10397889 10425553 10439398 10439414 10453263 10453296 10453316 10453337 10453365 10453390 10481054 10494887 10525999 10539827 10567487 10608967 10667732 10695384 10695388 10723040 10764520 10778348 10823280 10864765 10933893 10992649 11047953 11106713 11148189 11203490 11231138 11262250 11289902 11345202 11372850 11459250 11656246 11784126 11898174 12039870 12053694 12195390 12309438 12451147 12565195 12706891 12820943 12917715 12990291 13118163 13201107 13328979 13470679 13584731 13612379 13740251 13840475 13923419 14051295 14165343 14279391 14393443 14507499 14590443 14690667 14759787 14846187 14901483 14987879 15043171 15143391 15157211 15243607 15354199 15426767 15513163 15539802 15539818 15539835 15567425 15567512 15582283 15609004 15609931 15622853 15653793 15668683 15695478 15736983 15737803 15778164 15778467 15823424 15824203 15836903 15838027 15892568 15920971 15937111 15979718 15992407 15992813 16033879 16035006 16048133 16062650 16092635 16093754 16121398 16134111 16134562 16135218 16176686 16189878 16234831 16248167 16248680 16249250 16276385 16276447 16276508 16276561 16290722 16304234 16332189 16344943 16345718 16363002 16363006 16363285 16376835 16390659 16403708 16418307 16432397 16445196 16459024 16460041 16487689 16503977 16532609 16545473 16559334 16560244 16587876 16600831 16601688 16614684 16645796 16645825 16659673 16659681 16660415 16673530 16687378 16715678 16728883 16742748 16742781 16742826 16742863 16742900 16742929 16756785 16757113 16770638 16770917 16788164 16788176 16801771 16801787 16815624 16815640 16815652 16815673 16815689 16815706 16815714 16815734 16815755 16815779 16815796 16815804 ];
backgroundInd = [1215539 1342542 1383333 1383415 1383559 1383710 1410920 1428138 1455757 1510644 1524472 1538628 1569428 1569478 1569527 1569543 1569596 1569674 3016455 3057411 3098755 3112489 3126186 3142872 3142884 3142933 3143003 3143032 3143069 3143122 3143179 3143249 3143323 3143388 4077787 4344842 5722901 6214227 6289689 6583982 6642213 6811574 6839709 6953274 6998202 7009041 7094970 7105805 7167546 7281598 7292421 7434113 7492414 7548157 7644925 7803454 7845373 8000893 8100653 8197885 8311941 8415137 8439833 8650678 8712349 8892631 9092509 9203700 9362077 9390348 9532061 9718041 9729085 9926106 10101645 10112759 10168067 10309788 10311067 10311112 10311128 10311132 10311145 10311157 10324854 10324997 10325005 10338633 10338834 10338842 10338854 10338858 10383512 10397295 10424865 10424893 10424906 10424922 10437688 10452476 10452496 10466287 10480099 10507739 10509453 10525015 10566479 10579438 10594118 10635582 10707367 10708146 10709901 10777254 10821472 10862969 10932122 10993293 11032989 11046223 11105012 11201829 11274463 11288315 11329824 11343706 11371395 11371477 11371522 11371575 11371620 11388933 11388962 11388998 11389019 11389048 11389064 11389085 11430593 11430626 11458315 11485988 11513665 11515132 11558633 11586310 11612823 11612843 11612888 11612900 11626749 11654426 11672768 11685366 11726825 11728125 11729392 11740875 11754469 11782117 11796200 11815792 11828394 11882350 11882628 11939035 11954942 11982615 11996721 12011640 12037952 12065636 12065665 12065702 12065731 12065780 12065813 12065841 12065862 12065870 12097003 12125721 12193824 12223583 12350381 12363250 12449695 12523181 12524243 12563801 12647589 12679759 12747063 12775408 12861177 12904399 12917059 12947638 13044857 13058304 13103256 13118671 13131200 13146319 13172442 13172618 13186315 13186373 13186401 13260367 13328647 13342467 13356286 13387382 13415022 13415887 13442662 13470298 13484113 13515205 13529025 13556657 13556665 13584296 13611932 13612879 13670668 13725947 13753587 13754575 13798511 13825683 13826147 13867602 13881041 13895234 13908718 13909050 13922566 13922583 13922607 13922628 13922665 13922677 13922693 13922710 13922718 13922730 13922738 13922759 13922771 13922796 13922808 13922824 13922837 13922849 13968847 14193487 14476879 14663503 14819023 14946895 15071307 15088583 15230275 15385791 15513654 15582774 15682998 15797046 15866166 15907638 15921462 ];
L = superpixels(X,89680,'IsInputLab',true);

% Convert L*a*b* range to [0 1]
scaledX = prepLab(X);
BW = lazysnapping(scaledX,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1) = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2) = (in(:,:,2) + 86.1827) / 184.4170;  % a* range is [-86.1827,98.2343].
out(:,:,3) = (in(:,:,3) + 107.8602) / 202.3382;  % b* range is [-107.8602,94.4780].

end
